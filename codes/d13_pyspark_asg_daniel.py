# -*- coding: utf-8 -*-
"""D13_pyspark_asg_daniel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lxdyhf9ESYRm4I2pxA1I50cA9XYO3H_B

---
#**INITIALIZATION**
---

---
**DEPENDENCY (LIBRARY) INSTALLATION**

---
"""

! pip install pyspark
! pip install -U kaleido
! pip install pyarrow

"""---
**DEPENDENCY (LIBRARY) IMPORT**

---
"""

from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, IntegerType, StringType, TimestampType
import pyspark.sql.functions as Func
from pyspark.sql import Window as Win

import plotly.graph_objects as go
from plotly.subplots import make_subplots
import random

import numpy as np
from scipy.stats import norm
from collections import namedtuple

import plotly.io as pio

"""---
**INITIALIZATION OF SPARKSESSION OBJECT**

---
"""

spark = (
    SparkSession.builder.master(master="local").
    appName("D13_pyspark_asg").
    getOrCreate()
)

"""---
#**COURSE DATAFRAME**
---

---
**EXTRACT STAGE - CSV FILE BASED DATA EXTRACTION**

---
"""

course_schema = StructType(
                    [
                        StructField(
                            name="Course_ID",
                            dataType=IntegerType(),
                            nullable=True
                        ),

                        StructField(
                            name="Course_Name",
                            dataType=StringType(),
                            nullable=True
                        ),
                    ]
                )

course_df = spark.read.csv(
                path="/content/course.csv",
                header=True,
                schema=course_schema
            ).orderBy(Func.col(col="Course_ID").asc())

"""---
**TRANSFORM STAGE - REMOVAL OF NULL VALUE (DATA CLEANSING)**

---
"""

course_df = course_df.dropna().orderBy(Func.col(col="Course_ID").asc())

"""---
**TRANSFORM STAGE - REMOVAL OF DUPLICATE VALUE (DATA CLEANSING)**

---
"""

course_df = course_df.withColumn(
                colName="Duplicate_Flag",
                col=Func.count(col="*").over(
                        window=Win.partitionBy("Course_Name").orderBy(Func.lit(col=1))
                    ) > 1
            )

course_df = course_df.filter(condition=course_df.Duplicate_Flag == False)

course_df = course_df.drop("Duplicate_Flag").orderBy(Func.col(col="Course_ID").asc())

"""---
**TRANSFORM STAGE - TRIM STRING VALUE (DATA CLEANSING)**

---
"""

course_df = course_df.withColumn(
                colName="Course_Name",
                col=Func.trim(col="Course_Name")).orderBy(Func.col(col="Course_ID").asc()
            )

"""---
**TRANSFORM STAGE - TITLE CASE STRING VALUE RE-FORMAT (DATA CLEANSING)**

---
"""

course_df = course_df.withColumn(
                colName="Course_Name",
                col=Func.initcap(col="Course_Name")).orderBy(Func.col(col="Course_ID").asc()
            )

"""---
#**COURSE ATTENDANCE DATAFRAME**
---

---
**EXTRACT STAGE - CSV FILE BASED DATA EXTRACTION**

---
"""

import pandas as pd
from datetime import datetime

course_attendance_schema = StructType(
                                [
                                    StructField(
                                        name="Course_Attendance_ID",
                                        dataType=IntegerType(),
                                        nullable=True
                                    ),

                                    StructField(
                                        name="Student_ID",
                                        dataType=IntegerType(),
                                        nullable=True
                                    ),

                                    StructField(
                                        name="Schedule_ID",
                                        dataType=IntegerType(),
                                        nullable=True
                                    ),

                                    StructField(
                                        name="Course_Attendance_Date",
                                        dataType=StringType(),
                                        nullable=True
                                    ),
                                ]
                           )

course_attendance_df = spark.read.csv(
                           path="/content/course_attendance.csv",
                           header=True,
                           schema=course_attendance_schema
                       )

"""---
**TRANSFORM STAGE - REMOVAL OF NULL VALUE (DATA CLEANSING)**

---
"""

course_attendance_df = course_attendance_df.dropna().orderBy(Func.col(col="Course_Attendance_ID").asc())

"""---
**TRANSFORM STAGE - REMOVAL OF DUPLICATE VALUE (DATA CLEANSING)**

---
"""

dupli_cols_check = ["Student_ID", "Schedule_ID", "Course_Attendance_Date"]

course_attendance_df = course_attendance_df.withColumn(
                           colName="Duplicate_Flag",
                           col=Func.count(col="*").over(
                                   window=Win.partitionBy(*dupli_cols_check).orderBy(Func.lit(col=1))
                               ) > 1
                       )

course_attendance_df = course_attendance_df.filter(condition=course_attendance_df.Duplicate_Flag == False)

course_attendance_df = course_attendance_df.drop("Duplicate_Flag").orderBy(Func.col(col="Course_Attendance_ID").asc())

"""---
**TRANSFORM STAGE - TRIM STRING VALUE (DATA CLEANSING)**

---
"""

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date",
                           col=Func.trim(col="Course_Attendance_Date")).orderBy(Func.col(col="Course_Attendance_ID").asc()
                       )

"""---
**TRANSFORM STAGE - DATE VALUE RE-FORMAT (DATA TRANSFORMATION)**

---
"""

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date_Day",
                           col=Func.lit(
                               col=Func.substring_index(
                                       str=Func.col(col="Course_Attendance_Date"),
                                       delim="-",
                                       count=1
                                   )
                           )
                       )

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date_Year",
                           col=Func.lit(
                               col=Func.substring_index(
                                       str=Func.col(col="Course_Attendance_Date"),
                                       delim="-",
                                       count=-1
                                   )
                           )
                       )

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date_Month",
                           col=Func.lit(
                               col=Func.expr(
                                       str=
                                           """
                                               substring(
                                                   Course_Attendance_Date,
                                                   (
                                                       position("-" in Course_Attendance_Date) + 1
                                                   ),
                                                   (
                                                       position("-" in reverse(Course_Attendance_Date))
                                                   )
                                               )
                                           """
                               )
                           )
                       )

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date_Year",
                           col=Func.format_string(
                                   "20%s",
                                   Func.col(col="Course_Attendance_Date_Year")
                               )
                       )

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date_Month",
                           col=Func.from_unixtime(
                                   timestamp=Func.unix_timestamp(
                                                 timestamp=Func.col(col="Course_Attendance_Date_Month"),
                                                 format="MMM"
                                             ),
                                   format="MM"
                               )
                       )

course_attendance_cols=[
    "Course_Attendance_Date_Year",
    "Course_Attendance_Date_Month",
    "Course_Attendance_Date_Day"
]

course_attendance_df = course_attendance_df.withColumn(
                           colName="Course_Attendance_Date",
                           col=Func.concat_ws(
                                   "-",
                                   *course_attendance_cols
                               ).cast(dataType="date")
                       )

course_attendance_df = course_attendance_df.drop(*course_attendance_cols)

"""---
#**ENROLLMENT DATAFRAME**
---

---
**EXTRACT STAGE - CSV FILE BASED DATA EXTRACTION**

---
"""

enrollment_schema = StructType(
                        [
                            StructField(
                                name="Enrollment_ID",
                                dataType=IntegerType(),
                                nullable=True
                            ),

                            StructField(
                                name="Student_ID",
                                dataType=IntegerType(),
                                nullable=True
                            ),

                            StructField(
                                name="Schedule_ID",
                                dataType=IntegerType(),
                                nullable=True
                            ),

                            StructField(
                                name="Academic_Year",
                                dataType=StringType(),
                                nullable=True
                            ),

                            StructField(
                                name="Semester",
                                dataType=IntegerType(),
                                nullable=True
                            ),

                            StructField(
                                name="Enrollment_Date",
                                dataType=StringType(),
                                nullable=True
                            )
                        ]
                    )

enrollment_df = spark.read.csv(
                    path="/content/enrollment.csv",
                    header=True,
                    schema=enrollment_schema
                )

"""---
**TRANSFORM STAGE - REMOVAL OF NULL VALUE (DATA CLEANSING)**

---
"""

enrollment_df = enrollment_df.dropna().orderBy(Func.col(col="Enrollment_ID").asc())

"""---
**TRANSFORM STAGE - REMOVAL OF DUPLICATE VALUE (DATA CLEANSING)**

---
"""

dupli_cols_check = ["Student_ID", "Schedule_ID", "Academic_Year", "Semester", "Enrollment_Date"]

enrollment_df = enrollment_df.withColumn(
                    colName="Duplicate_Flag",
                    col=Func.count(col="*").over(
                            window=Win.partitionBy(*dupli_cols_check).orderBy(Func.lit(col=1))
                        ) > 1
                )

enrollment_df = enrollment_df.filter(condition=enrollment_df.Duplicate_Flag == False)

enrollment_df = enrollment_df.drop("Duplicate_Flag").orderBy(Func.col(col="Enrollment_ID").asc())

"""---
**TRANSFORM STAGE - TRIM STRING VALUE (DATA CLEANSING)**

---
"""

enrollment_df = enrollment_df.withColumn(
                    colName="Academic_Year",
                    col=Func.trim(col="Academic_Year")).orderBy(Func.col(col="Enrollment_ID").asc()
                )

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date",
                    col=Func.trim(col="Enrollment_Date")).orderBy(Func.col(col="Enrollment_ID").asc()
                )

"""---
**TRANSFORM STAGE - STRING BETWEEN VALUE RE-FORMAT (DATA TRANSFORMATION)**

---
"""

enrollment_df = enrollment_df.withColumn(
                    colName="Academic_Year",
                    col=Func.regexp_replace(
                            string="Academic_Year",
                            pattern="/",
                            replacement="-"
                        )
                )

"""---
**TRANSFORM STAGE - DATE VALUE RE-FORMAT (DATA TRANSFORMATION)**

---
"""

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date_Day",
                    col=Func.lit(
                            col=Func.substring_index(
                                    str=Func.col(col="Enrollment_Date"),
                                    delim="-",
                                    count=1
                                )
                        )
                )

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date_Year",
                    col=Func.lit(
                            col=Func.substring_index(
                                    str=Func.col(col="Enrollment_Date"),
                                    delim="-",
                                    count=-1
                                )
                        )
                )

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date_Month",
                    col=Func.lit(
                            col=Func.expr(
                                    str=
                                        """
                                            substring(
                                                Enrollment_Date,
                                                (
                                                    position("-" in Enrollment_Date) + 1
                                                ),
                                                (
                                                    position("-" in reverse(Enrollment_Date))
                                                )
                                            )
                                        """
                                )
                        )
                )

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date_Year",
                    col=Func.format_string(
                            "20%s",
                            Func.col(col="Enrollment_Date_Year")
                        )
                )

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date_Month",
                    col=Func.from_unixtime(
                            timestamp=Func.unix_timestamp(
                                          timestamp=Func.col(col="Enrollment_Date_Month"),
                                          format="MMM"
                                      ),
                            format="MM"
                        )
                )

enrollment_date_cols=[
    "Enrollment_Date_Year",
    "Enrollment_Date_Month",
    "Enrollment_Date_Day"
]

enrollment_df = enrollment_df.withColumn(
                    colName="Enrollment_Date",
                    col=Func.concat_ws(
                            "-",
                            *enrollment_date_cols
                        ).cast(dataType="date")
                )

enrollment_df = enrollment_df.drop(*enrollment_date_cols)

"""---
#**SCHEDULE DATAFRAME**
---

---
**EXTRACT STAGE - CSV FILE BASED DATA EXTRACTION**

---
"""

schedule_schema = StructType(
                      fields=[
                          StructField(
                              name="Schedule_ID",
                              dataType=IntegerType(),
                              nullable=True
                          ),

                          StructField(
                              name="Course_ID",
                              dataType=IntegerType(),
                              nullable=True
                          ),

                          StructField(
                              name="Lecture_ID",
                              dataType=IntegerType(),
                              nullable=True
                          ),

                          StructField(
                              name="Start_Date",
                              dataType=StringType(),
                              nullable=True
                          ),

                          StructField(
                              name="End_Date",
                              dataType=StringType(),
                              nullable=True
                          ),

                          StructField(
                              name="Course_Days",
                              dataType=StringType(),
                              nullable=True
                          )
                      ]
                  )

schedule_df = spark.read.csv(
                  path="/content/schedule.csv",
                  header=True,
                  schema=schedule_schema
              )

"""---
**TRANSFORM STAGE - REMOVAL OF NULL VALUE (DATA CLEANSING)**

---
"""

schedule_df = schedule_df.dropna().orderBy(Func.col(col="Schedule_ID").asc())

"""---
**TRANSFORM STAGE - REMOVAL OF DUPLICATE VALUE (DATA CLEANSING)**

---
"""

dupli_cols_check = ["Course_ID", "Lecture_ID", "Start_Date", "End_Date", "Course_Days"]

schedule_df = schedule_df.withColumn(
                  colName="Duplicate_Flag",
                  col=Func.count(col="*").over(
                          window=Win.partitionBy(*dupli_cols_check).orderBy(Func.lit(col=1))
                      ) > 1
              )

schedule_df = schedule_df.filter(condition=schedule_df.Duplicate_Flag == False)

schedule_df = schedule_df.drop("Duplicate_Flag").orderBy(Func.col(col="Schedule_ID").asc())

"""---
**TRANSFORM STAGE - TRIM STRING VALUE (DATA CLEANSING)**

---
"""

schedule_df = schedule_df.withColumn(
                  colName="Start_Date",
                  col=Func.trim(col="Start_Date")).orderBy(Func.col(col="Schedule_ID").asc()
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date",
                  col=Func.trim(col="End_Date")).orderBy(Func.col(col="Schedule_ID").asc()
                  )

"""---
**TRANSFORM STAGE - DATE VALUE RE-FORMAT (DATA TRANSFORMATION)**

---
"""

schedule_df = schedule_df.withColumn(
                  colName="Start_Date_Day",
                  col=Func.lit(
                          col=Func.substring_index(
                                  str=Func.col(col="Start_Date"),
                                  delim="-",
                                  count=1
                              )
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="Start_Date_Year",
                  col=Func.lit(
                          col=Func.substring_index(
                                  str=Func.col(col="Start_Date"),
                                  delim="-",
                                  count=-1
                              )
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="Start_Date_Month",
                  col=Func.lit(
                          col=Func.expr(
                                  str=
                                      """
                                          substring(
                                              Start_Date,
                                              (
                                                  position("-" in Start_Date) + 1
                                              ),
                                              (
                                                  position("-" in reverse(Start_Date))
                                              )
                                          )
                                      """
                              )
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="Start_Date_Year",
                  col=Func.format_string(
                          "20%s",
                          Func.col(col="Start_Date_Year")
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="Start_Date_Month",
                  col=Func.from_unixtime(
                          timestamp=Func.unix_timestamp(
                                        timestamp=Func.col(col="Start_Date_Month"),
                                        format="MMM"
                                    ),
                          format="MM"
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date_Day",
                  col=Func.lit(
                          col=Func.substring_index(
                                  str=Func.col(col="End_Date"),
                                  delim="-",
                                  count=1
                              )
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date_Year",
                  col=Func.lit(
                          col=Func.substring_index(
                                  str=Func.col(col="End_Date"),
                                  delim="-",
                                  count=-1
                              )
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date_Month",
                  col=Func.lit(
                          col=Func.expr(
                                  str=
                                      """
                                          substring(
                                              End_Date,
                                              (
                                                  position("-" in End_Date) + 1
                                              ),
                                              (
                                                  position("-" in reverse(End_Date))
                                              )
                                          )
                                      """
                              )
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date_Year",
                  col=Func.format_string(
                          "20%s",
                          Func.col(col="End_Date_Year")
                      )
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date_Month",
                  col=Func.from_unixtime(
                          timestamp=Func.unix_timestamp(
                                        timestamp=Func.col(col="End_Date_Month"),
                                        format="MMM"
                                    ),
                          format="MM"
                      )
              )

start_end_date_cols=[
    [
        "Start_Date_Year",
        "Start_Date_Month",
        "Start_Date_Day"
    ],
    [
        "End_Date_Year",
        "End_Date_Month",
        "End_Date_Day"
    ]
]

schedule_df = schedule_df.withColumn(
                  colName="Start_Date",
                  col=Func.concat_ws(
                          "-",
                          *start_end_date_cols[0]
                      ).cast(dataType="date")
              )

schedule_df = schedule_df.withColumn(
                  colName="End_Date",
                  col=Func.concat_ws(
                          "-",
                          *start_end_date_cols[1]
                      ).cast(dataType="date")
              )

for start_end_date_col in start_end_date_cols:
    schedule_df = schedule_df.drop(*start_end_date_col)

"""---
#**OUTPUT DISPLAY**
---

---
**DATA OUTPUT - COURSE DATAFRAME**

---
"""

course_df.show(truncate=False)

course_df.printSchema()

"""---
**DATA OUTPUT - COURSE ATTENDANCE DATAFRAME**

---
"""

course_attendance_df.show(truncate=False)

course_attendance_df.printSchema()

"""---
**DATA OUTPUT - ENROLLMENT DATAFRAME**

---
"""

enrollment_df.show(truncate=False)

enrollment_df.printSchema()

"""---
**DATA OUTPUT - SCHEDULE DATAFRAME**

---
"""

schedule_df.show(truncate=False)

schedule_df.printSchema()

"""---
#**GRAPHIC VISUALIZATION**
---

---
**DATA GRAPH - INITIALIZATION MARKER COLORS**

---
"""

colors=\
    """
        aliceblue, antiquewhite, aqua, aquamarine, azure,
        beige, bisque, black, blanchedalmond, blue,
        blueviolet, brown, burlywood, cadetblue,
        chartreuse, chocolate, coral, cornflowerblue,
        cornsilk, crimson, cyan, darkblue, darkcyan,
        darkgoldenrod, darkgray, darkgrey, darkgreen,
        darkkhaki, darkmagenta, darkolivegreen, darkorange,
        darkorchid, darkred, darksalmon, darkseagreen,
        darkslateblue, darkslategray, darkslategrey,
        darkturquoise, darkviolet, deeppink, deepskyblue,
        dimgray, dimgrey, dodgerblue, firebrick,
        floralwhite, forestgreen, fuchsia, gainsboro,
        ghostwhite, gold, goldenrod, gray, grey, green,
        greenyellow, honeydew, hotpink, indianred, indigo,
        ivory, khaki, lavender, lavenderblush, lawngreen,
        lemonchiffon, lightblue, lightcoral, lightcyan,
        lightgoldenrodyellow, lightgray, lightgrey,
        lightgreen, lightpink, lightsalmon, lightseagreen,
        lightskyblue, lightslategray, lightslategrey,
        lightsteelblue, lightyellow, lime, limegreen,
        linen, magenta, maroon, mediumaquamarine,
        mediumblue, mediumorchid, mediumpurple,
        mediumseagreen, mediumslateblue, mediumspringgreen,
        mediumturquoise, mediumvioletred, midnightblue,
        mintcream, mistyrose, moccasin, navajowhite, navy,
        oldlace, olive, olivedrab, orange, orangered,
        orchid, palegoldenrod, palegreen, paleturquoise,
        palevioletred, papayawhip, peachpuff, peru, pink,
        plum, powderblue, purple, red, rosybrown,
        royalblue, saddlebrown, salmon, sandybrown,
        seagreen, seashell, sienna, silver, skyblue,
        slateblue, slategray, slategrey, snow, springgreen,
        steelblue, tan, teal, thistle, tomato, turquoise,
        violet, wheat, white, whitesmoke, yellow,
        yellowgreen
    """

list_of_marker_colors = colors.split(sep=",")

list_of_marker_colors = [
                            l.replace(
                                  "\n",
                                  ""
                              ) for l in list_of_marker_colors
                        ]


list_of_marker_colors = [
                            l.replace(
                                  " ",
                                  ""
                              ) for l in list_of_marker_colors
                        ]

"""---
**DATA GRAPH - "TOTAL STUDENT ATTENDANCES FOR EACH COURSE PER SEMESTER" - GATHER & PROCESS THE DATA**

---
"""

course_student_total_attend_per_sems_df = schedule_df.join(
                                              other=course_df,
                                              on=schedule_df.Course_ID == course_df.Course_ID,
                                              how="inner"
                                          ).join(
                                              other=enrollment_df,
                                              on=schedule_df.Schedule_ID == enrollment_df.Schedule_ID,
                                              how="inner"
                                          ).join(
                                              other=course_attendance_df,
                                              on=(enrollment_df.Student_ID == course_attendance_df.Student_ID)
                                                 & (schedule_df.Schedule_ID == course_attendance_df.Schedule_ID),
                                              how="inner"
                                          ).groupBy(
                                              course_df["Course_Name"],
                                              enrollment_df["Semester"]
                                          ).count().select(
                                                        course_df["Course_Name"].alias("List_of_Course"),
                                                        enrollment_df["Semester"].alias("Student_Semester"),
                                                        Func.col(col="count").alias("Total_Attendance")
                                                    ).orderBy(
                                                          enrollment_df["Semester"],
                                                          course_df["Course_Name"],
                                                          ascending=True
                                                      )

pd_course_student_total_attend_per_sems_df = course_student_total_attend_per_sems_df.toPandas()

pd_course_student_total_attend_per_sems_df["Student_Semester"] = pd_course_student_total_attend_per_sems_df["Student_Semester"].astype(str)

pd_course_student_total_attend_per_sems_df

"""---
**DATA GRAPH - "TOTAL STUDENT ATTENDANCES FOR EACH COURSE PER SEMESTER" - GENERATE THE DATA**

---
"""

marker_colors = random.sample(
                    population=range(
                                   0,
                                   len(list_of_marker_colors)
                               ),
                    k=len(pd_course_student_total_attend_per_sems_df["List_of_Course"].unique())
                )

marker_color_idx = 0

total_attendance_min = pd_course_student_total_attend_per_sems_df["Total_Attendance"].min()
total_attendance_mean = pd_course_student_total_attend_per_sems_df["Total_Attendance"].mean()
total_attendance_max = pd_course_student_total_attend_per_sems_df["Total_Attendance"].max()

course_student_total_attend_per_sems_fig = go.Figure()

for courses in pd_course_student_total_attend_per_sems_df["List_of_Course"].unique():
    course_student_total_attend_per_sems_fig.add_trace(
        go.Bar(
            x=pd_course_student_total_attend_per_sems_df.query(f"List_of_Course == \"{courses}\"")["Student_Semester"],
            y=pd_course_student_total_attend_per_sems_df.query(f"List_of_Course == \"{courses}\"")["Total_Attendance"],
            name=f"<i>{courses}</i>",
            marker_color=list_of_marker_colors[marker_colors[marker_color_idx]],
            legend="legend2",
            showlegend=True
        )
    )

    marker_color_idx += 1

course_student_total_attend_per_sems_fig.add_trace(
    go.Scatter(
        mode="lines",
        x=pd_course_student_total_attend_per_sems_df["Student_Semester"].unique(),
        y=[total_attendance_min] * len(pd_course_student_total_attend_per_sems_df),
        name=f"<b>Lowest Student Attendance</b> ⟼ <i>{round(total_attendance_min, 2)}</i>",
        line=dict(
                color = "cyan",
                width = 6
            ),
        legend="legend1",
        showlegend=True
    )
)

course_student_total_attend_per_sems_fig.add_trace(
    go.Scatter(
        mode="lines",
        x=pd_course_student_total_attend_per_sems_df["Student_Semester"].unique(),
        y=[total_attendance_mean] * len(pd_course_student_total_attend_per_sems_df),
        name=f"<b>Average Student Attendance</b> ⟼ <i>{round(total_attendance_mean, 2)}</i>",
        line=dict(
                color="light green",
                width=6
            ),
        legend="legend1",
        showlegend=True
    )
)

course_student_total_attend_per_sems_fig.add_trace(
    go.Scatter(
        mode="lines",
        x=pd_course_student_total_attend_per_sems_df["Student_Semester"].unique(),
        y=[total_attendance_max] * len(pd_course_student_total_attend_per_sems_df),
        name=f"<b>Maximum Student Attendance</b> ⟼ <i>{round(total_attendance_max, 2)}</i>",
        line=dict(
                color="red",
                width=6
            ),
        legend="legend1",
        showlegend=True
    )
)

course_student_total_attend_per_sems_fig.update_layout(
    paper_bgcolor="black",
    plot_bgcolor="black",
    autosize=True,
    title={
        "text": "<b>\"Total Student Attendance for Each Course per Semester\"</b>",
        "y": 0.9,
        "x": 0.5,
        "xanchor": "center",
        "yanchor": "top"
    },
    font=dict(
             family="Times New Roman",
             size=20,
             color="white"
         ),
    xaxis=dict(
              title="<b><i>Total of Student Semester</b></i>",
              titlefont_size=18,
              tickfont_size=14,
          ),
    yaxis=dict(
              title="<b><i>Total of Student Attedance</b></i>",
              titlefont_size=18,
              tickfont_size=14,
          ),
    legend1=dict(
               x=1.025,
               y=0.95,
               traceorder="normal",
               title="<b>Statistic Information</b>:",
               font=dict(
                        family="Times New Roman",
                        size=16,
                        color="white"
                    ),
               itemwidth=30,
               bgcolor="black",
               bordercolor="springgreen",
               borderwidth=2
           ),
    legend2=dict(
               x=1.025,
               y=0.05,
               traceorder="normal",
               title="<b>List of Course Name</b>:",
               font=dict(
                        family="Times New Roman",
                        size=16,
                        color="white"
                    ),
               itemwidth=30,
               bgcolor="black",
               bordercolor="gold",
               borderwidth=2
            ),
    barmode="group",
    bargap=0.15,
    bargroupgap=0.1
)

course_student_total_attend_per_sems_fig.update_xaxes(
    automargin=True
)

course_student_total_attend_per_sems_fig.update_yaxes(
    automargin=True
)

course_student_total_attend_per_sems_fig.update_xaxes(
    ticks="outside",
    showline=True,
    linecolor="white",
    gridcolor="white"
)

course_student_total_attend_per_sems_fig.update_yaxes(
    ticks="outside",
    showline=True,
    linecolor="white",
    gridcolor="white"
)

course_student_total_attend_per_sems_fig.show()

"""---
**DATA GRAPH - "DISTRIBUTION OF TOTAL STUDENT ATTENDANCE PER SEMESTER" - GATHER & PROCESS THE DATA**

---
"""

distribution_of_total_student_attend_on_sems_1_df = course_attendance_df.join(
                                                        other=schedule_df,
                                                        on=course_attendance_df.Schedule_ID == schedule_df.Schedule_ID,
                                                        how="inner"
                                                    ).join(
                                                        other=enrollment_df,
                                                        on=(course_attendance_df.Student_ID == enrollment_df.Student_ID)
                                                            & (schedule_df.Schedule_ID == enrollment_df.Schedule_ID),
                                                        how="inner"
                                                    ).filter(
                                                        (Func.col(col="Semester") == 1)
                                                        & (Func.dayofweek(Func.col(col="Course_Attendance_Date")).between(2,6))
                                                    ).groupBy(
                                                        Func.dayofweek(Func.col(col="Course_Attendance_Date"))
                                                    ).count().select(
                                                                  Func.when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 2,
                                                                      value="Monday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 3,
                                                                      value="Tuesday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 4,
                                                                      value="Wednesday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 5,
                                                                      value="Thursday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 6,
                                                                      value="Friday"
                                                                  ).alias("Day_of_Week"),
                                                                  Func.col(col="count").alias("Total_Daily_Attendance")
                                                              ).orderBy(
                                                                  Func.col(col="dayofweek(Course_Attendance_Date)"),
                                                                  ascending=True
                                                              )

distribution_of_total_student_attend_on_sems_2_df = course_attendance_df.join(
                                                        other=schedule_df,
                                                        on=course_attendance_df.Schedule_ID == schedule_df.Schedule_ID,
                                                        how="inner"
                                                    ).join(
                                                        other=enrollment_df,
                                                        on=(course_attendance_df.Student_ID == enrollment_df.Student_ID)
                                                            & (schedule_df.Schedule_ID == enrollment_df.Schedule_ID),
                                                        how="inner"
                                                    ).filter(
                                                        (Func.col(col="Semester") == 2)
                                                        & (Func.dayofweek(Func.col(col="Course_Attendance_Date")).between(2,6))
                                                    ).groupBy(
                                                        Func.dayofweek(Func.col(col="Course_Attendance_Date"))
                                                    ).count().select(
                                                                  Func.when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 2,
                                                                      value="Monday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 3,
                                                                      value="Tuesday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 4,
                                                                      value="Wednesday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 5,
                                                                      value="Thursday"
                                                                  ).when(
                                                                      condition=Func.col(col="dayofweek(Course_Attendance_Date)") == 6,
                                                                      value="Friday"
                                                                  ).alias("Day_of_Week"),
                                                                  Func.col(col="count").alias("Total_Daily_Attendance")
                                                              ).orderBy(
                                                                  Func.col(col="dayofweek(Course_Attendance_Date)"),
                                                                  ascending=True
                                                              )

avg_val_of_total_student_attend_on_sems_1 = round(distribution_of_total_student_attend_on_sems_1_df.select(Func.avg("Total_Daily_Attendance")).collect()[0][0], 2)
st_dev_val_total_student_attend_on_sems_1 = round(distribution_of_total_student_attend_on_sems_1_df.select(Func.stddev("Total_Daily_Attendance")).collect()[0][0], 2)

avg_val_of_total_student_attend_on_sems_2 = round(distribution_of_total_student_attend_on_sems_2_df.select(Func.avg("Total_Daily_Attendance")).collect()[0][0], 2)
st_dev_val_total_student_attend_on_sems_2 = round(distribution_of_total_student_attend_on_sems_2_df.select(Func.stddev("Total_Daily_Attendance")).collect()[0][0], 2)

distribution_of_total_student_attend_on_sems_1_df.show(truncate=False)
distribution_of_total_student_attend_on_sems_2_df.show(truncate=False)

print(f"{(avg_val_of_total_student_attend_on_sems_1, st_dev_val_total_student_attend_on_sems_1)}")
print(f"{(avg_val_of_total_student_attend_on_sems_2, st_dev_val_total_student_attend_on_sems_2)}")

"""---
**DATA GRAPH - "DISTRIBUTION OF TOTAL STUDENT ATTENDANCE PER SEMESTER" - GENERATE THE DATA**

---
"""

def bell_shaped_curve_of_distribution_total_student_attend_generator(plot_names, plot_values):
    list_of_fill_colors = ["rgba(255, 0, 213, 0.1)", "rgba(0, 231, 255, 0.1)"]

    distribution_of_total_student_attend_per_sems_fig = go.Figure()

    min_range_of_x_axis = min([plot_value_idx.avg - (4 * plot_value_idx.st_dev) for plot_value_idx in plot_values])

    max_range_of_x_axis = max([plot_value_idx.avg + (4 * plot_value_idx.st_dev) for plot_value_idx in plot_values])

    x_axis_range = np.arange(
                          min_range_of_x_axis,
                          max_range_of_x_axis,
                          0.001
                      )

    for plot_name_idx in range(len(plot_names)):
        y_axis_range = norm.pdf(
                                x_axis_range,
                                plot_values[plot_name_idx].avg,
                                plot_values[plot_name_idx].st_dev
                            )

        distribution_of_total_student_attend_per_sems_fig.add_trace(
            go.Scatter(
                   x=x_axis_range,
                   y=y_axis_range,
                   mode="lines",
                   fill="tozeroy",
                   fillcolor=list_of_fill_colors[plot_name_idx],
                   name=f"<i>{plot_names[plot_name_idx]}</i>",
                   legend="legend",
                   showlegend=True
               )
        )

    #--------------------------------------------------------------------------------------

    y_coor_serious_left = []
    y_coor_serious_left_val = 0

    for x_coor_serious_left_idx in range(13):
        if x_coor_serious_left_idx > 0:
            y_coor_serious_left_val += 0.001

        else:
            y_coor_serious_left_val = 0

        y_coor_serious_left.append(y_coor_serious_left_val)

    x_coor_serious_left = [-20 for x_coor_serious_left_idx in range(len(y_coor_serious_left))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_serious_left,
            y=y_coor_serious_left,
            name="Serious Under Expectation Marker Left",
            marker=dict(
                color="lightcoral",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    y_coor_serious_right = []
    y_coor_serious_right_val = 0

    for x_coor_serious_right_idx in range(13):
        if x_coor_serious_right_idx > 0:
            y_coor_serious_right_val += 0.001

        else:
            y_coor_serious_right_val = 0

        y_coor_serious_right.append(y_coor_serious_right_val)

    x_coor_serious_right = [0 for x_coor_serious_right_idx in range(len(y_coor_serious_right))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_serious_right,
            y=y_coor_serious_right,
            name="Serious Under Expectation Marker Right",
            marker=dict(
                color="lightcoral",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="lines",
            x=[-20, 0],
            y=[(0.005 + 0.005), (0.005 + 0.005)],
            name="Serious Under Expectation Line",
            line=dict(
                color="lightcoral",
                width=5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=-10,
        y=0.00225,
        text="<b>10%</b>",
        font=dict(
            family = "Times New Roman",
            size = 24,
            color = "white"
        ),
        showarrow=False
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=-10,
        y=(0.0065 + 0.005),
        text="<b><i>Serious Under Expectation</b></i>",
        font=dict(
            family = "Times New Roman",
            size = 18,
            color = "lightcoral"
        ),
        showarrow=False
    )

    #--------------------------------------------------------------------------------------

    y_coor_below_left = []
    y_coor_below_left_val = 0

    for x_coor_below_left_idx in range(20):
        if x_coor_below_left_idx > 0:
            y_coor_below_left_val += 0.001

        else:
            y_coor_below_left_val = 0

        y_coor_below_left.append(y_coor_below_left_val)

    x_coor_below_left = [0 for x_coor_below_left_idx in range(len(y_coor_below_left))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_below_left,
            y=y_coor_below_left,
            name="Below Expectation Marker Left",
            marker=dict(
                color="lightcoral",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    y_coor_below_right = []
    y_coor_below_right_val = 0

    for x_coor_below_right_idx in range(20):
        if x_coor_below_right_idx > 0:
            y_coor_below_right_val += 0.001

        else:
            y_coor_below_right_val = 0

        y_coor_below_right.append(y_coor_below_right_val)

    x_coor_below_right = [20 for x_coor_below_right_idx in range(len(y_coor_below_right))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_below_right,
            y=y_coor_below_right,
            name="Below Expectation Marker Right",
            marker=dict(
                color="lightcoral",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="lines",
            x=[0, 20],
            y=[(0.0125 + 0.005), (0.0125 + 0.005)],
            name="Below Expectation Line",
            line=dict(
                color="lightcoral",
                width=5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=10,
        y=0.00225,
        text="<b>15%</b>",
        font=dict(
            family = "Times New Roman",
            size = 24,
            color = "white"
        ),
        showarrow=False
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=10,
        y=(0.014 + 0.005),
        text="<b><i>Below Expectation</b></i>",
        font=dict(
            family = "Times New Roman",
            size = 18,
            color = "lightcoral"
        ),
        showarrow=False
    )

    #--------------------------------------------------------------------------------------

    y_coor_excellent_left = []
    y_coor_excellent_left_val = 0

    for x_coor_excellent_left_idx in range(13):
        if x_coor_excellent_left_idx > 0:
            y_coor_excellent_left_val += 0.001

        else:
            y_coor_excellent_left_val = 0

        y_coor_excellent_left.append(y_coor_excellent_left_val)

    x_coor_excellent_left = [80 for x_coor_excellent_left_idx in range(len(y_coor_excellent_left))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_excellent_left,
            y=y_coor_excellent_left,
            name="Excellent Expectation Marker Left",
            marker=dict(
                color="springgreen",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    y_coor_excellent_right = []
    y_coor_excellent_right_val = 0

    for x_coor_excellent_right_idx in range(13):
        if x_coor_excellent_right_idx > 0:
            y_coor_excellent_right_val += 0.001

        else:
            y_coor_excellent_right_val = 0

        y_coor_excellent_right.append(y_coor_excellent_right_val)

    x_coor_excellent_right = [100 for x_coor_excellent_right_idx in range(len(y_coor_excellent_right))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_excellent_right,
            y=y_coor_excellent_right,
            name="Excellent Expectation Marker Right",
            marker=dict(
                color="springgreen",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="lines",
            x=[80, 100],
            y=[(0.005 + 0.005), (0.005 + 0.005)],
            name="Excellent Expectation Line",
            line=dict(
                color="springgreen",
                width=5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=90,
        y=0.00225,
        text="<b>10%</b>",
        font=dict(
            family = "Times New Roman",
            size = 24,
            color = "white"
        ),
        showarrow=False
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=90,
        y=(0.0065 + 0.005),
        text="<b><i>Excellent Expectation</b></i>",
        font=dict(
            family = "Times New Roman",
            size = 18,
            color = "springgreen"
        ),
        showarrow=False
    )

    #--------------------------------------------------------------------------------------

    y_coor_above_left = []
    y_coor_above_left_val = 0

    for x_coor_above_left_idx in range(20):
        if x_coor_above_left_idx > 0:
            y_coor_above_left_val += 0.001

        else:
            y_coor_above_left_val = 0

        y_coor_above_left.append(y_coor_above_left_val)

    x_coor_above_left = [60 for x_coor_above_left_idx in range(len(y_coor_above_left))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_above_left,
            y=y_coor_above_left,
            name="Above Expectation Marker Left",
            marker=dict(
                color="springgreen",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    y_coor_above_right = []
    y_coor_above_right_val = 0

    for x_coor_above_right_idx in range(20):
        if x_coor_above_right_idx > 0:
            y_coor_above_right_val += 0.001

        else:
            y_coor_above_right_val = 0

        y_coor_above_right.append(y_coor_above_right_val)

    x_coor_above_right = [80 for x_coor_above_right_idx in range(len(y_coor_above_right))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_above_right,
            y=y_coor_above_right,
            name="Above Expectation Marker Right",
            marker=dict(
                color="springgreen",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="lines",
            x=[60, 80],
            y=[(0.0125 + 0.005), (0.0125 + 0.005)],
            name="Above Expectation Line",
            line=dict(
                color="springgreen",
                width=5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=70,
        y=0.00225,
        text="<b>15%</b>",
        font=dict(
            family = "Times New Roman",
            size = 24,
            color = "white"
        ),
        showarrow=False
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=70,
        y=(0.014 + 0.005),
        text="<b><i>Above Expectation</b></i>",
        font=dict(
            family = "Times New Roman",
            size = 18,
            color = "springgreen"
        ),
        showarrow=False
    )

    #--------------------------------------------------------------------------------------

    y_coor_meets_left = []
    y_coor_meets_left_val = 0

    for x_coor_meets_left_idx in range(28):
        if x_coor_meets_left_idx > 0:
            y_coor_meets_left_val += 0.001

        else:
            y_coor_meets_left_val = 0

        y_coor_meets_left.append(y_coor_meets_left_val)

    x_coor_meets_left = [20 for x_coor_meets_left_idx in range(len(y_coor_meets_left))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_meets_left,
            y=y_coor_meets_left,
            name="Meets Expectation Marker Left",
            marker=dict(
                color="gold",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    y_coor_meets_center = []
    y_coor_meets_center_val = 0

    for x_coor_meets_center_idx in range(26):
        if x_coor_meets_center_idx > 0:
            y_coor_meets_center_val += 0.001

        else:
            y_coor_meets_center_val = 0

        y_coor_meets_center.append(y_coor_meets_center_val)

    x_coor_meets_center = [40 for x_coor_meets_center_idx in range(len(y_coor_meets_center))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_meets_center,
            y=y_coor_meets_center,
            name="Meets Expectation Marker Middle",
            marker=dict(
                color="gold",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    y_coor_meets_right = []
    y_coor_meets_right_val = 0

    for x_coor_meets_right_idx in range(28):
        if x_coor_meets_right_idx > 0:
            y_coor_meets_right_val += 0.001

        else:
            y_coor_meets_right_val = 0

        y_coor_meets_right.append(y_coor_meets_right_val)

    x_coor_meets_right = [60 for x_coor_meets_right_idx in range(len(y_coor_meets_right))]

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="markers",
            marker_symbol="circle",
            x=x_coor_meets_right,
            y=y_coor_meets_right,
            name="Meets Expectation Marker Right",
            marker=dict(
                color="gold",
                size=5,
                opacity=0.5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_trace(
        go.Scatter(
            mode="lines",
            x=[20, 60],
            y=[(0.02 + 0.005), (0.02 + 0.005)],
            name="Meets Expectation Line",
            line=dict(
                color="gold",
                width=5
            ),
            showlegend=False
        )
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=30,
        y=0.00225,
        text="<b>25%</b>",
        font=dict(
            family = "Times New Roman",
            size = 24,
            color = "white"
        ),
        showarrow=False
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=50,
        y=0.00225,
        text="<b>25%</b>",
        font=dict(
            family = "Times New Roman",
            size = 24,
            color = "white"
        ),
        showarrow=False
    )

    distribution_of_total_student_attend_per_sems_fig.add_annotation(
        x=40,
        y=(0.0215 + 0.005),
        text="<b><i>Meets Expectation</i></b>",
        font=dict(
            family = "Times New Roman",
            size = 18,
            color = "gold"
        ),
        showarrow=False
    )

    #--------------------------------------------------------------------------------------

    distribution_of_total_student_attend_per_sems_fig.update_layout(
        paper_bgcolor="black",
        plot_bgcolor="black",
        autosize=True,
        title={
            "text": "<b>\"Distribution of Total Student Attendance per Semester\"</b>",
            "y": 0.9,
            "x": 0.5,
            "xanchor": "center",
            "yanchor": "top"
        },
        font=dict(
                 family = "Times New Roman",
                 size = 20,
                 color = "white"
             ),
        xaxis=dict(
                  title="<b><i>Z-Score</b></i>",
                  titlefont_size=18,
                  tickfont_size=14,
                  range=[-20, 100]
              ),
        yaxis=dict(
                  title="<b><i>Probability Density</b></i>",
                  titlefont_size=18,
                  tickfont_size=14,
                  range=[0, 0.025]
              ),
        legend=dict(
                   orientation = "h",
                   yanchor="bottom",
                   y=-0.25,
                   xanchor="left",
                   x=0.108,
                   traceorder="normal",
                   title="<b>Distribution per Semester</b>:",
                   font=dict(
                             family="Times New Roman",
                             size=16,
                             color="white"
                         ),
                   bgcolor="black",
                   bordercolor="gold",
                   borderwidth=2
               )
    )

    distribution_of_total_student_attend_per_sems_fig.update_xaxes(
        automargin=True
    )

    distribution_of_total_student_attend_per_sems_fig.update_yaxes(
        automargin=True
    )

    distribution_of_total_student_attend_per_sems_fig.update_xaxes(
        ticks="outside",
        showline=True,
        linecolor="white",
        gridcolor="white"
    )

    distribution_of_total_student_attend_per_sems_fig.update_yaxes(
        ticks="outside",
        showline=True,
        linecolor="white",
        gridcolor="white",
        range=[0, 0.03]
    )

    distribution_of_total_student_attend_per_sems_fig.show()

    return distribution_of_total_student_attend_per_sems_fig

List_of_Student_Semester_df = enrollment_df.select(
                                  Func.when(
                                      condition=Func.col(col="Semester") == 1,
                                      value="Semester 1"
                                  ).when(
                                      condition=Func.col(col="Semester") == 2,
                                      value="Semester 2"
                                  ).alias("List_of_Student_Semester"),
                                  ).distinct().orderBy(
                                                   Func.col(col="List_of_Student_Semester"),
                                                   ascending=True
                                               ).collect()

List_of_Student_Semester = []

for student_sems_row_idx in List_of_Student_Semester_df:
    for student_sems_val_idx in student_sems_row_idx:
        List_of_Student_Semester.append(student_sems_val_idx)

Distribution_of_total_student_attend = namedtuple(
                                           "Distribution_of_total_student_attend",
                                           ["avg", "st_dev"]
                                       )

distribution_of_total_student_attend_per_semester = [
            Distribution_of_total_student_attend(avg_val_of_total_student_attend_on_sems_1, st_dev_val_total_student_attend_on_sems_1),
            Distribution_of_total_student_attend(avg_val_of_total_student_attend_on_sems_2, st_dev_val_total_student_attend_on_sems_2)
]

distribution_of_total_student_attend_per_sems_fig = bell_shaped_curve_of_distribution_total_student_attend_generator(
                                                        plot_names=List_of_Student_Semester,
                                                        plot_values=distribution_of_total_student_attend_per_semester
                                                    )

"""---
**DATA GRAPH - "LECTURER TOTAL TEACHING ACTIVITIES PER SEMESTER" - GATHER & PROCESS THE DATA**

---
"""

@Func.udf(returnType=IntegerType())

def count_total_day_of_busday(start_date, end_date, search_day_type):
    search_day_type = search_day_type.split(", ")

    count_total_days = sum(
                           [
                               np.busday_count(
                                   start_date,
                                   end_date,
                                   weekmask=search_day
                               ) for search_day in search_day_type
                           ]
                       )

    return int(count_total_days)

lecturer_total_teaching_act_on_sems_1_df = schedule_df.join(
                                                          other=course_df,
                                                          on=schedule_df.Course_ID == schedule_df.Course_ID,
                                                          how="inner"
                                                      ).join(
                                                          other=enrollment_df,
                                                          on=schedule_df.Schedule_ID == enrollment_df.Schedule_ID,
                                                          how="inner"
                                                      ).filter(
                                                          Func.col(col="Semester") == 1
                                                      ).select(
                                                          Func.col(col="Lecture_ID"),
                                                          Func.col(col="Semester"),
                                                          Func.col(col="Start_Date"),
                                                          Func.col(col="End_Date"),
                                                          Func.explode(col=Func.split(Func.col(col="Course_Days"), ",")).alias("Breakdown_Date")
                                                      ).distinct()

lecturer_total_teaching_act_on_sems_1_df = lecturer_total_teaching_act_on_sems_1_df.withColumn(
                                                                                    colName="Breakdown_Date",
                                                                                    col=Func.when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 2,
                                                                                                value="Mon"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 3,
                                                                                                value="Tue"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 4,
                                                                                                value="Wed"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 5,
                                                                                                value="Thu"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 6,
                                                                                                value="Fri"
                                                                                            ).alias("Breakdown_Date")
)

lecturer_total_teaching_act_on_sems_1_df = lecturer_total_teaching_act_on_sems_1_df.groupby("Lecture_ID", "Semester", "Start_Date", "End_Date").agg(
        Func.concat_ws(", ",
                Func.collect_list(lecturer_total_teaching_act_on_sems_1_df.Breakdown_Date)
            ).alias("Day_of_Week")
    )

lecturer_total_teaching_act_on_sems_1_df = lecturer_total_teaching_act_on_sems_1_df.withColumn(
                                                                                    colName="Total_Teaching_Activity",
                                                                                    col=Func.lit(
                                                                                        col= count_total_day_of_busday(
                                                                                                Func.col(col="Start_Date").cast("string"),
                                                                                                Func.col(col="End_Date").cast("string"),
                                                                                                Func.col(col="Day_of_Week").cast("string")
                                                                                            )
                                                                                )
)

date_cols=[
    [
        "Start_Date",
        "End_Date",
        "Day_of_Week"
    ]
]

for date_col in date_cols:
    lecturer_total_teaching_act_on_sems_1_df = lecturer_total_teaching_act_on_sems_1_df.drop(*date_col)

lecturer_total_teaching_act_on_sems_1_df = lecturer_total_teaching_act_on_sems_1_df.orderBy(
                                                                                        Func.col(col="Lecture_ID"),
                                                                                        ascending=True
                                                                                    )

lecturer_total_teaching_act_on_sems_2_df = schedule_df.join(
                                                          other=course_df,
                                                          on=schedule_df.Course_ID == schedule_df.Course_ID,
                                                          how="inner"
                                                      ).join(
                                                          other=enrollment_df,
                                                          on=schedule_df.Schedule_ID == enrollment_df.Schedule_ID,
                                                          how="inner"
                                                      ).filter(
                                                          Func.col(col="Semester") == 2
                                                      ).select(
                                                          Func.col(col="Lecture_ID"),
                                                          Func.col(col="Semester"),
                                                          Func.col(col="Start_Date"),
                                                          Func.col(col="End_Date"),
                                                          Func.explode(col=Func.split(Func.col(col="Course_Days"), ",")).alias("Breakdown_Date")
                                                      ).distinct()

lecturer_total_teaching_act_on_sems_2_df = lecturer_total_teaching_act_on_sems_2_df.withColumn(
                                                                                    colName="Breakdown_Date",
                                                                                    col=Func.when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 2,
                                                                                                value="Mon"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 3,
                                                                                                value="Tue"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 4,
                                                                                                value="Wed"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 5,
                                                                                                value="Thu"
                                                                                            ).when(
                                                                                                condition=Func.col(col="Breakdown_Date") == 6,
                                                                                                value="Fri"
                                                                                            ).alias("Breakdown_Date")
)

lecturer_total_teaching_act_on_sems_2_df = lecturer_total_teaching_act_on_sems_2_df.groupby("Lecture_ID", "Semester", "Start_Date", "End_Date").agg(
        Func.concat_ws(", ",
                Func.collect_list(lecturer_total_teaching_act_on_sems_2_df.Breakdown_Date)
            ).alias("Day_of_Week")
    )

lecturer_total_teaching_act_on_sems_2_df = lecturer_total_teaching_act_on_sems_2_df.withColumn(
                                                                                    colName="Total_Teaching_Activity",
                                                                                    col=Func.lit(
                                                                                        col= count_total_day_of_busday(
                                                                                                Func.col(col="Start_Date").cast("string"),
                                                                                                Func.col(col="End_Date").cast("string"),
                                                                                                Func.col(col="Day_of_Week").cast("string")
                                                                                            )
                                                                                )
)

date_cols=[
    [
        "Start_Date",
        "End_Date",
        "Day_of_Week"
    ]
]

for date_col in date_cols:
    lecturer_total_teaching_act_on_sems_2_df = lecturer_total_teaching_act_on_sems_2_df.drop(*date_col)

lecturer_total_teaching_act_on_sems_2_df = lecturer_total_teaching_act_on_sems_2_df.orderBy(
                                                                                        Func.col(col="Lecture_ID"),
                                                                                        ascending=True
                                                                                    )

pd_lecturer_total_teaching_act_on_sems_1_df = lecturer_total_teaching_act_on_sems_1_df.toPandas()

pd_lecturer_total_teaching_act_on_sems_2_df = lecturer_total_teaching_act_on_sems_2_df.toPandas()

print(pd_lecturer_total_teaching_act_on_sems_1_df)

print(pd_lecturer_total_teaching_act_on_sems_2_df)

"""---
**DATA GRAPH - "LECTURER TOTAL TEACHING ACTIVITIES PER SEMESTER" - GENERATE THE DATA**

---
"""

lecture_semester_1_labels = [f"Lecture (ID: {lecture_id_value})" for lecture_id_value in pd_lecturer_total_teaching_act_on_sems_1_df["Lecture_ID"].values]
lecture_semester_2_labels = [f"Lecture (ID: {lecture_id_value})" for lecture_id_value in pd_lecturer_total_teaching_act_on_sems_2_df["Lecture_ID"].values]

lecture_semester_1_flag_labels = np.unique([f"Semester {lecture_semester_value}" for lecture_semester_value in pd_lecturer_total_teaching_act_on_sems_1_df["Semester"].values])
lecture_semester_2_flag_labels = np.unique([f"Semester {lecture_semester_value}" for lecture_semester_value in pd_lecturer_total_teaching_act_on_sems_2_df["Semester"].values])

lecture_total_teaching_activity_per_sems_1_labels = [total_teaching_value for total_teaching_value in pd_lecturer_total_teaching_act_on_sems_1_df["Total_Teaching_Activity"].values]
lecture_total_teaching_activity_per_sems_2_labels = [total_teaching_value for total_teaching_value in pd_lecturer_total_teaching_act_on_sems_2_df["Total_Teaching_Activity"].values]

list_of_fill_sem_1_color = ["#F06292", "#F48FB1", "#F8BBD0", "#FCE4EC"]
list_of_fill_sem_2_color = ["#26C6DA", "#4DD0E1", "#80DEEA", "#B2EBF2"]

lecturer_total_teaching_act_per_sems_fig = make_subplots(
                                               rows=1,
                                               cols=2,
                                               specs=[
                                                   [
                                                       {"type":"domain"},
                                                       {"type":"domain"}
                                                   ]
                                               ]
                                           )

lecturer_total_teaching_act_per_sems_fig.add_trace(
    trace=go.Pie(
              labels=lecture_semester_1_labels,
              values=lecture_total_teaching_activity_per_sems_1_labels,
              name=f"Lecture Total Teaching Activity per {lecture_semester_1_flag_labels[0]}",
              marker=dict(
                         colors=list_of_fill_sem_1_color,
                         line=dict(
                                  color="white",
                                  width=2
                              )
                      ),
              textinfo="label+percent",
              insidetextorientation="radial",
              legend="legend1",
              showlegend=True
    ),
    row=1,
    col=1
)

lecturer_total_teaching_act_per_sems_fig.add_trace(
    trace=go.Pie(
              labels=lecture_semester_2_labels,
              values=lecture_total_teaching_activity_per_sems_2_labels,
              name=f"Lecture Total Teaching Activity per {lecture_semester_2_flag_labels[0]}",
              marker=dict(
                         colors=list_of_fill_sem_2_color,
                         line=dict(
                                  color="white",
                                  width=2
                              )
                      ),
              textinfo="label+percent",
              insidetextorientation="radial",
              legend="legend2",
              showlegend=True
    ),
    row=1,
    col=2
)

lecturer_total_teaching_act_per_sems_fig.add_shape(
    type="line",
    x0=0.5,
    y0=0.0385,
    x1=0.5,
    y1=0.7775,
    line=dict(
        color="white",
        width=4,
        dash="dashdot",
    )
)

lecturer_total_teaching_act_per_sems_fig.update_traces(
    hole=.3,
    hoverinfo="label + percent + name"
)

lecturer_total_teaching_act_per_sems_fig.update_layout(
    margin=dict(
              t=0,
              b=0,
              l=45,
              r=45
          )
)

lecturer_total_teaching_act_per_sems_fig.update_layout(
    paper_bgcolor="black",
    plot_bgcolor="black",
    autosize=False,
    width=1080,
    height=864,
    title={
        "text": "<b>\"Lecturer Total Teaching Activities per Semester\"</b>",
        "y": 0.9,
        "x": 0.5,
        "xanchor": "center",
        "yanchor": "top"
    },
    font=dict(
            family="Times New Roman",
            size=20,
            color="white"
        ),
    annotations=[
        dict(
            x=0.168,
            y=0.5,
            text=f"<b><i>{lecture_semester_1_flag_labels[0]}</i></b>",
            font=dict(
                family = "Times New Roman",
                size = 24,
                color = "white"
            ),
            showarrow=False
        ),
        dict(
            x=0.83,
            y=0.5,
            text=f"<b><i>{lecture_semester_2_flag_labels[0]}</i></b>",
            font=dict(
                family = "Times New Roman",
                size = 24,
                color = "white"
            ),
            showarrow=False
        )
    ],
    uniformtext_minsize=16,
    legend1=dict(
                x=0.148,
                y=0.038,
                traceorder="normal",
                title=f"<b>{lecture_semester_1_flag_labels[0]}</b>:",
                font=dict(
                          family="Times New Roman",
                          size=16,
                          color="white"
                      ),
                itemwidth=30,
                bgcolor="black",
                bordercolor="gold",
                borderwidth=2
          ),
    legend2=dict(
                x=0.7,
                y=0.048,
                traceorder="normal",
                title=f"<b>{lecture_semester_2_flag_labels[0]}</b>:",
                font=dict(
                          family="Times New Roman",
                          size=16,
                          color="white"
                      ),
                itemwidth=30,
                bgcolor="black",
                bordercolor="gold",
                borderwidth=2
            ),
)

lecturer_total_teaching_act_per_sems_fig.show()

"""---
#**EXPORT GRAPHICAL IMAGE**
---

---
**GRAPH EXPORT - "TOTAL STUDENT ATTENDANCES FOR EACH COURSE PER SEMESTER" - GRAPH DATA EXPORT (`.PNG` and `.SVG` Formats)**

---
"""

pio.write_image(
        fig=course_student_total_attend_per_sems_fig,
        file="D13_PySpark_PNG_Pic_Total_Student_Attend_for_Each_Course_per_Sems.png",
        format="png",
        scale=1,
        width=1920,
        height=566,
        engine="kaleido"
    )

pio.write_image(
        fig=course_student_total_attend_per_sems_fig,
        file="D13_PySpark_SVG_File_Total_Student_Attend_for_Each_Course_per_Sems.svg",
        format="svg",
        scale=1,
        width=1920,
        height=566,
        engine="kaleido"
    )

"""---
**GRAPH EXPORT - "DISTRIBUTION OF TOTAL STUDENT ATTENDANCE PER SEMESTER" - GRAPH DATA EXPORT (`.PNG` and `.SVG` Format)**

---
"""

pio.write_image(
        fig=distribution_of_total_student_attend_per_sems_fig,
        file="D13_PySpark_PNG_Pic_Distribution_of_Total_Student_Attend_per_Sems.png",
        format="png",
        scale=1,
        width=1920,
        height=566,
        engine="kaleido"
    )

pio.write_image(
        fig=distribution_of_total_student_attend_per_sems_fig,
        file="D13_PySpark_SVG_File_Distribution_of_Total_Student_Attend_per_Sems.svg",
        format="svg",
        scale=1,
        width=1920,
        height=566,
        engine="kaleido"
    )

"""---
**GRAPH EXPORT - "LECTURER TOTAL TEACHING ACTIVITIES PER SEMESTER" - GRAPH DATA EXPORT (`.PNG` and `.SVG` Format)**

---
"""

pio.write_image(
        fig=lecturer_total_teaching_act_per_sems_fig,
        file="D13_PySpark_PNG_Pic_Lecturer_Total_Teaching_Act_per_Sems.png",
        format="png",
        scale=1,
        width=1080,
        height=864,
        engine="kaleido"
    )

pio.write_image(
        fig=lecturer_total_teaching_act_per_sems_fig,
        file="D13_PySpark_SVG_File_Lecturer_Total_Teaching_Act_per_Sems_ASG_Daniel_Albesta.svg",
        format="svg",
        scale=1,
        width=1080,
        height=864,
        engine="kaleido"
    )

"""---
#**EXPORT STATISTICAL DATA**
---

---
**DATA EXPORT - "TOTAL STUDENT ATTENDANCES FOR EACH COURSE PER SEMESTER" - INITIALIZATION STATISTICAL DATA**

---
"""

pd_course_student_total_attend_per_sems_df

"""---
**DATA EXPORT - "DISTRIBUTION OF TOTAL STUDENT ATTENDANCE PER SEMESTER" - INITIALIZATION STATISTICAL DATA**

---
"""

pd_distribution_of_total_student_attend_on_sems_1_df = distribution_of_total_student_attend_on_sems_1_df.toPandas()

pd_distribution_of_total_student_attend_on_sems_2_df = distribution_of_total_student_attend_on_sems_2_df.toPandas()

pd_distribution_of_total_student_attend_on_sems_1_df

pd_distribution_of_total_student_attend_on_sems_2_df

pd_union_distribution_of_total_student_attend_per_sems_df = pd.concat(
                                                                objs=[
                                                                    pd_distribution_of_total_student_attend_on_sems_1_df,
                                                                    pd_distribution_of_total_student_attend_on_sems_2_df
                                                                ],
                                                                ignore_index=True
                                                            )

pd_union_distribution_of_total_student_attend_per_sems_df

"""---
**DATA EXPORT - "LECTURER TOTAL TEACHING ACTIVITIES PER SEMESTER" - INITIALIZATION STATISTICAL DATA**

---
"""

pd_lecturer_total_teaching_act_on_sems_1_df

pd_lecturer_total_teaching_act_on_sems_2_df

pd_union_lecturer_total_teaching_act_per_sems_df = pd.concat(
                                                       objs=[
                                                           pd_lecturer_total_teaching_act_on_sems_1_df,
                                                           pd_lecturer_total_teaching_act_on_sems_2_df
                                                       ],
                                                       ignore_index=True
                                                   )

pd_union_lecturer_total_teaching_act_per_sems_df

"""---
**DATA EXPORT - GRAPH DATA EXPORT (`.CSV` Format)**

---
"""

# storing the data in CSV format
pd_course_student_total_attend_per_sems_df.to_csv(
    path_or_buf="D13_PySpark_CSV_File_Total_Student_Attend_for_Each_Course_per_Sems.csv",
    sep=",",
    header=True,
    index=True,
    mode="w"
)

# reading the CSV file
pd_course_student_total_attend_per_sems_csv_df = pd.read_csv(
                                                     filepath_or_buffer="D13_PySpark_CSV_File_Total_Student_Attend_for_Each_Course_per_Sems.csv",
                                                     sep=",",
                                                     header="infer"
                                                 )

# displaying the DataFrame
pd_course_student_total_attend_per_sems_csv_df

pd_union_distribution_of_total_student_attend_per_sems_df.to_csv(
    path_or_buf="D13_PySpark_CSV_File_Distribution_of_Total_Student_Attend_per_Sems.csv",
    sep=",",
    header=True,
    index=True,
    mode="w"
)

pd_distribution_of_total_student_attend_per_sems_csv_df = pd.read_csv(
                                                              filepath_or_buffer="D13_PySpark_CSV_File_Total_Student_Attend_for_Each_Course_per_Sems.csv",
                                                              sep=",",
                                                              header="infer"
                                                          )

pd_distribution_of_total_student_attend_per_sems_csv_df

pd_union_lecturer_total_teaching_act_per_sems_df.to_csv(
    path_or_buf="D13_PySpark_CSV_File_Lecturer_Total_Teaching_Act_per_Sems.csv",
    sep=",",
    header=True,
    index=True,
    mode="w"
)

pd_lecturer_total_teaching_act_per_sems_csv_df = pd.read_csv(
                                                     filepath_or_buffer="D13_PySpark_CSV_File_Lecturer_Total_Teaching_Act_per_Sems.csv",
                                                     sep=",",
                                                     header="infer"
                                                 )

pd_lecturer_total_teaching_act_per_sems_csv_df

"""---
**DATA EXPORT - GRAPH DATA EXPORT (`.JSON` Format)**

---
"""

# storing the data in JSON format
pd_course_student_total_attend_per_sems_df.to_json(
    path_or_buf='D13_PySpark_JSON_File_Total_Student_Attend_for_Each_Course_per_Sems.json',
    orient='records',
    compression='infer'
)

# reading the JSON file
pd_course_student_total_attend_per_sems_json_df = pd.read_json(
                                                      path_or_buf='D13_PySpark_JSON_File_Total_Student_Attend_for_Each_Course_per_Sems.json',
                                                      orient='records',
                                                      compression='infer'
                                                  )

# displaying the DataFrame
pd_course_student_total_attend_per_sems_json_df

pd_union_distribution_of_total_student_attend_per_sems_df.to_json(
    path_or_buf='D13_PySpark_JSON_File_Distribution_of_Total_Student_Attend_per_Sems.json',
    orient='records',
    compression='infer'
)

pd_distribution_of_total_student_attend_per_sems_json_df = pd.read_json(
                                                               path_or_buf='D13_PySpark_JSON_File_Distribution_of_Total_Student_Attend_per_Sems.json',
                                                               orient='records',
                                                               compression='infer'
                                                           )

pd_distribution_of_total_student_attend_per_sems_json_df

pd_union_lecturer_total_teaching_act_per_sems_df.to_json(
    path_or_buf='D13_PySpark_JSON_File_Lecturer_Total_Teaching_Act_per_Sems.json',
    orient='records',
    compression='infer'
)

pd_lecturer_total_teaching_act_per_sems_json_df = pd.read_json(
                                                      path_or_buf='D13_PySpark_JSON_File_Lecturer_Total_Teaching_Act_per_Sems.json',
                                                      orient='records',
                                                      compression='infer'
                                                  )

pd_lecturer_total_teaching_act_per_sems_json_df

"""---
**DATA EXPORT - GRAPH DATA EXPORT (`.PARQUET` Format)**

---
"""

# storing the data in PARQUET format
pd_course_student_total_attend_per_sems_df.to_parquet(
    path="D13_PySpark_PARQUET_File_Total_Student_Attend_for_Each_Course_per_Sems.gzip",
    engine="pyarrow",
    compression="gzip"
)

# reading the PARQUET file
pd_course_student_total_attend_per_sems_parquet_df = pd.read_parquet(
                                                         path="D13_PySpark_PARQUET_File_Total_Student_Attend_for_Each_Course_per_Sems.gzip",
                                                         engine="pyarrow"
                                                     )

# displaying the DataFrame
pd_course_student_total_attend_per_sems_parquet_df

pd_course_student_total_attend_per_sems_df.to_parquet(
    path="D13_PySpark_PARQUET_File_Distribution_of_Total_Student_Attend_per_Sems.gzip",
    engine="pyarrow",
    compression="gzip"
)

pd_distribution_of_total_student_attend_per_sems_parquet_df = pd.read_parquet(
                                                                  path="D13_PySpark_PARQUET_File_Total_Student_Attend_for_Each_Course_per_Sems.gzip",
                                                                  engine="pyarrow"
                                                              )

pd_distribution_of_total_student_attend_per_sems_parquet_df

pd_course_student_total_attend_per_sems_df.to_parquet(
    path="D13_PySpark_PARQUET_File_Lecturer_Total_Teaching_Act_per_Sems.gzip",
    engine="pyarrow",
    compression="gzip"
)

pd_lecturer_total_teaching_act_per_sems_parquet_df = pd.read_parquet(
                                                         path="D13_PySpark_PARQUET_File_Total_Student_Attend_for_Each_Course_per_Sems.gzip",
                                                         engine="pyarrow"
                                                     )

pd_lecturer_total_teaching_act_per_sems_parquet_df